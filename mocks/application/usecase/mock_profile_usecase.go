// Code generated by MockGen. DO NOT EDIT.
// Source: profile_usecase.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/sakaguchi-0725/echo-onion-arch/application/dto"
)

// MockProfileUsecase is a mock of ProfileUsecase interface.
type MockProfileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockProfileUsecaseMockRecorder
}

// MockProfileUsecaseMockRecorder is the mock recorder for MockProfileUsecase.
type MockProfileUsecaseMockRecorder struct {
	mock *MockProfileUsecase
}

// NewMockProfileUsecase creates a new mock instance.
func NewMockProfileUsecase(ctrl *gomock.Controller) *MockProfileUsecase {
	mock := &MockProfileUsecase{ctrl: ctrl}
	mock.recorder = &MockProfileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfileUsecase) EXPECT() *MockProfileUsecaseMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockProfileUsecase) FindByUserID(userID string) (dto.ProfileOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", userID)
	ret0, _ := ret[0].(dto.ProfileOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockProfileUsecaseMockRecorder) FindByUserID(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockProfileUsecase)(nil).FindByUserID), userID)
}
